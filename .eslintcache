[{"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/index.js":"1","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/App.js":"2","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Login/index.js":"3","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Dashboard/index.js":"4","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/services/api.js":"5","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/routes.js":"6","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Register/index.js":"7","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/EventsPage/index.js":"8","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/components/TopNav.js":"9","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/MyRegistrations/index.js":"10","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/user-context.js":"11"},{"size":218,"mtime":1611952894090,"results":"12","hashOfConfig":"13"},{"size":486,"mtime":1611965074104,"results":"14","hashOfConfig":"13"},{"size":2708,"mtime":1611953070288,"results":"15","hashOfConfig":"13"},{"size":7989,"mtime":1611964469688,"results":"16","hashOfConfig":"13"},{"size":117,"mtime":1611898052484,"results":"17","hashOfConfig":"13"},{"size":864,"mtime":1611962729808,"results":"18","hashOfConfig":"13"},{"size":3477,"mtime":1611952754866,"results":"19","hashOfConfig":"13"},{"size":5529,"mtime":1611956239774,"results":"20","hashOfConfig":"13"},{"size":1401,"mtime":1611952459537,"results":"21","hashOfConfig":"13"},{"size":2520,"mtime":1611963043213,"results":"22","hashOfConfig":"13"},{"size":562,"mtime":1611953133726,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"awv6uh",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/index.js",[],["51","52"],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/App.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Login/index.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Dashboard/index.js",["53"],"import React, { useEffect, useState, useMemo } from 'react';\nimport api from '../../services/api';\nimport moment from 'moment';\nimport { Button, ButtonGroup, Alert, Dropdown, DropdownItem, DropdownMenu, DropdownToggle } from 'reactstrap';\nimport socketio from 'socket.io-client';\nimport './dashboard.css'\n\n\nexport default function Dashboard({ history }) {\n    const [events, setEvents] = useState([])\n    const user = localStorage.getItem('user')\n    const user_id = localStorage.getItem('user_id')\n\n    const [rSelected, setRSelected] = useState(null)\n    const [error, setError] = useState(false);\n    const [success, setSuccess] = useState(false)\n    const [messageHandler, setMessageHandler] = useState('')\n    const [eventsRequest, setEventsRequest] = useState([])\n    const [dropdownOpen, setDropDownOpen] = useState(false)\n    const [eventRequestMessage, setEventRequestMessage] = useState('')\n    const [eventRequestSuccess, setEventRequestSuccess] = useState(false)\n\n    const toggle = () => setDropDownOpen(!dropdownOpen);\n\n    useEffect(() => {\n        getEvents()\n    }, [])\n\n    const socket = useMemo(\n        () =>\n            socketio('http://localhost:8000/', { query: { user: user_id } }),\n        [user_id]\n    );\n\n    useEffect(() => {\n        socket.on('registration_request', data => setEventsRequest([...eventsRequest, data]));\n    }, [eventsRequest, socket])\n\n    const filterHandler = (query) => {\n        setRSelected(query)\n        getEvents(query)\n    }\n\n    const myEventsHandler = async () => {\n        try {\n            setRSelected('myevents')\n            const response = await api.get('/user/events', { headers: { user } })\n            setEvents(response.data.events)\n        } catch (error) {\n            history.push('/login');\n        }\n\n    }\n\n    const getEvents = async (filter) => {\n        try {\n            const url = filter ? `/dashboard/${filter}` : '/dashboard';\n            const response = await api.get(url, { headers: { user } })\n\n            setEvents(response.data.events)\n        } catch (error) {\n            history.push('/login');\n        }\n\n    };\n\n    const deleteEventHandler = async (eventId) => {\n        try {\n            await api.delete(`/event/${eventId}`, { headers: { user: user } });\n            setSuccess(true)\n            setMessageHandler('The event was deleted successfully!')\n            setTimeout(() => {\n                setSuccess(false)\n                filterHandler(null)\n                setMessageHandler('')\n            }, 2500)\n\n        } catch (error) {\n            setError(true)\n            setMessageHandler('Error when deleting event!')\n            setTimeout(() => {\n                setError(false)\n                setMessageHandler('')\n            }, 2000)\n        }\n    }\n\n    const registrationRequestHandler = async (event) => {\n        try {\n            await api.post(`/registration/${event.id}`, {}, { headers: { user } })\n            setSuccess(true)\n            setMessageHandler(`The request for the event ${event.title} was successfully!`)\n            setTimeout(() => {\n                setSuccess(false)\n                filterHandler(null)\n                setMessageHandler('')\n            }, 2500)\n\n        } catch (error) {\n            setError(true)\n            setMessageHandler(`The request for the event ${event.title} wasn't successfully!`)\n            setTimeout(() => {\n                setError(false)\n                setMessageHandler('')\n            }, 2000)\n        }\n    }\n\n    const acceptEventHandler = async (eventId) => {\n        try {\n            await api.post(`/registration/${eventId}/approvals`, {}, { headers: { user } })\n            setEventRequestSuccess(true)\n            setEventRequestMessage('Event approved successfully!')\n            removeNotificationFromDashboard(eventId)\n            setTimeout(() => {\n                setEventRequestSuccess(false)\n                setEventRequestMessage('')\n            }, 2000)\n\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    const rejectEventHandler = async (eventId) => {\n        try {\n            await api.post(`/registration/${eventId}/rejections`, {}, { headers: { user } })\n            setEventRequestSuccess(true)\n            setEventRequestMessage('Event rejected successfully!')\n            removeNotificationFromDashboard(eventId)\n            setTimeout(() => {\n                setEventRequestSuccess(false)\n                setEventRequestMessage('')\n            }, 2000)\n\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    const removeNotificationFromDashboard = (eventId) => {\n        const newEvents = eventsRequest.filter((event) => event._id !== eventId)\n        setEventsRequest(newEvents)\n    }\n\n    return (\n        <>\n            <ul className=\"notifications\">\n                {eventsRequest.map(request => {\n                    return (\n                        <li key={request._id}>\n                            <div>\n                                <strong>{request.user.email} </strong> is requesting to register to your Event <strong>{request.event.title}</strong>\n                            </div>\n                            <ButtonGroup>\n                                <Button color=\"secondary\" onClick={() => acceptEventHandler(request._id)}>Accept</Button>\n                                <Button color=\"danger\" onClick={() => rejectEventHandler(request._id)}>Reject</Button>\n                            </ButtonGroup>\n                        </li>\n                    )\n                })}\n            </ul>\n            {eventRequestSuccess ? <Alert color=\"success\"> {eventRequestMessage}</Alert> : \"\"}\n            <div className=\"filter-panel\">\n                <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n                    <DropdownToggle color=\"primary\" caret>\n                        Filter\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem onClick={() => filterHandler(null)} active={rSelected === null} >All Events</DropdownItem>\n                        <DropdownItem onClick={myEventsHandler} active={rSelected === 'myevents'} >My Events</DropdownItem>\n                        <DropdownItem onClick={() => filterHandler(\"running\")} active={rSelected === 'running'} >Outdoor Strength</DropdownItem>\n                        <DropdownItem onClick={() => filterHandler(\"cycling\")} active={rSelected === 'cycling'} >Outdoor Yoga</DropdownItem>\n                        <DropdownItem color=\"primary\" onClick={() => filterHandler('swimming')} active={rSelected === 'swimming'} >Virtual Classes</DropdownItem>\n                    </DropdownMenu>\n                </Dropdown>\n            </div>\n            <ul className=\"events-list\">\n                {events.map(event => (\n                    < li key={event._id} >\n                        <header style={{ backgroundImage: `url(${event.thumbnail_url})` }}>\n                            {event.user === user_id ? <div><Button color=\"danger\" size=\"sm\" onClick={() => deleteEventHandler(event._id)}>Delete</Button></div> : \"\"}\n\n                        </header>\n                        <strong>{event.title}</strong>\n                        <span>Event Date: {moment(event.date).format('l')}</span>\n                        <span>Event Price: {parseFloat(event.price).toFixed(2)}</span>\n                        <span>Event Description: {event.description}</span>\n                        <Button color=\"primary\" onClick={() => registrationRequestHandler(event)}>Registration Request</Button>\n                    </li>\n                ))}\n            </ul>\n            {\n                error ? (\n                    <Alert className=\"event-validation\" color=\"danger\"> {messageHandler} </Alert>\n                ) : \"\"\n            }\n            {\n                success ? (\n                    <Alert className=\"event-validation\" color=\"success\"> {messageHandler}</Alert>\n                ) : \"\"\n            }\n        </>\n    )\n}","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/services/api.js",[],["54","55"],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/routes.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Register/index.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/EventsPage/index.js",["56","57"],"\nimport React, { useState, useMemo, useEffect } from 'react';\nimport api from '../../services/api';\nimport { Alert, Container, Button, Form, FormGroup, Input, Label, DropdownItem, DropdownMenu, DropdownToggle, ButtonDropdown } from 'reactstrap';\nimport cameraIcon from '../../assets/camera.png'\nimport \"./events.css\";\n\nexport default function EventsPage({ history }) {\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [price, setPrice] = useState('')\n    const [thumbnail, setThumbnail] = useState(null)\n    const [sport, setSport] = useState('Sport')\n    const [date, setDate] = useState('')\n    const [error, setError] = useState(false)\n    const [success, setSuccess] = useState(false)\n    const [dropdownOpen, setOpen] = useState(false);\n    const user = localStorage.getItem('user');\n\n    useEffect(() => {\n        if (!user) history.push('/login');\n    }, [])\n\n    const toggle = () => setOpen(!dropdownOpen);\n\n    const preview = useMemo(() => {\n        return thumbnail ? URL.createObjectURL(thumbnail) : null;\n    }, [thumbnail])\n\n    const submitHandler = async (evt) => {\n        evt.preventDefault()\n\n        const eventData = new FormData();\n\n        eventData.append(\"thumbnail\", thumbnail)\n        eventData.append(\"sport\", sport)\n        eventData.append(\"title\", title)\n        eventData.append(\"price\", price)\n        eventData.append(\"description\", description)\n        eventData.append(\"date\", date)\n\n\n        try {\n            if (title !== \"\" &&\n                description !== \"\" &&\n                price !== \"\" &&\n                sport !== \"Sport\" &&\n                date !== \"\" &&\n                thumbnail !== null\n            ) {\n                await api.post(\"/event\", eventData, { headers: { user } })\n                setSuccess(true)\n                setTimeout(() => {\n                    setSuccess(false)\n                    history.push(\"/\")\n                }, 2000)\n            } else {\n                setError(true)\n                setTimeout(() => {\n                    setError(false)\n                }, 2000)\n            }\n        } catch (error) {\n            Promise.reject(error);\n            console.log(error);\n        }\n    }\n\n    const sportEventHandler = (sport) => setSport(sport);\n\n    return (\n        <Container>\n            <h2>Create your Event</h2>\n            <Form onSubmit={submitHandler}>\n                <div className=\"input-group\">\n                    <FormGroup>\n                        <Label>Upload Image: </Label>\n                        <Label id='thumbnail' style={{ backgroundImage: `url(${preview})` }} className={thumbnail ? 'has-thumbnail' : ''}>\n                            <Input type=\"file\" onChange={evt => setThumbnail(evt.target.files[0])} />\n                            <img src={cameraIcon} style={{ maxWidth: \"50px\" }} alt=\"upload icon image\" />\n                        </Label>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label>Title: </Label>\n                        <Input id=\"title\" type=\"text\" value={title} placeholder={'Event Title'} onChange={(evt) => setTitle(evt.target.value)} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label>Event description: </Label>\n                        <Input id=\"description\" type=\"text\" value={description} placeholder={'Event Description'} onChange={(evt) => setDescription(evt.target.value)} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label>Event price: </Label>\n                        <Input id=\"price\" type=\"text\" value={price} placeholder={'Event Price $0.00'} onChange={(evt) => setPrice(evt.target.value)} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label>Event date: </Label>\n                        <Input id=\"date\" type=\"date\" value={date} placeholder={'Event Price $0.00'} onChange={(evt) => setDate(evt.target.value)} />\n                    </FormGroup>\n                    <FormGroup>\n                        <ButtonDropdown isOpen={dropdownOpen} toggle={toggle}>\n                            <Button id=\"caret\" value={sport} disabled>{sport}</Button>\n                            <DropdownToggle caret />\n                            <DropdownMenu>\n                                <DropdownItem onClick={() => sportEventHandler('Strength')}>Outdoor Strength</DropdownItem>\n                                <DropdownItem onClick={() => sportEventHandler('Yoga')}>Outdoor Yoga</DropdownItem>\n                                <DropdownItem onClick={() => sportEventHandler('Cycling')}>Virtual Fitness Class</DropdownItem>\n                            </DropdownMenu>\n                        </ButtonDropdown>\n                    </FormGroup>\n                </div>\n                <FormGroup>\n                    <Button className=\"submit-btn\">Submit</Button>\n                </FormGroup>\n                <FormGroup>\n                    <Button className=\"secondary-btn\" onClick={() => history.push(\"/\")}>\n                        Cancel\n                    </Button>\n                </FormGroup>\n            </Form>\n            {error ? (\n                <Alert className=\"event-validation\" color=\"danger\"> Missing required information</Alert>\n            ) : \"\"}\n            {success ? (\n                <Alert className=\"event-validation\" color=\"success\"> The event was created successfully!</Alert>\n            ) : \"\"}\n        </Container>\n    )\n}","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/components/TopNav.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/MyRegistrations/index.js",["58"],"import React, { useState, useEffect } from 'react'\nimport moment from 'moment';\nimport api from '../../services/api'\nimport { Button, ButtonGroup } from 'reactstrap';\nimport './style.css'\n\n\nexport default function MyRegistrations() {\n    const [myEvents, setMyEvents] = useState([])\n    const user = localStorage.getItem('user')\n\n    useEffect(() => {\n        getMyEvents()\n    }, [])\n\n    const getMyEvents = async () => {\n        try {\n            const response = await api.get('/registration', { headers: { user } })\n            console.log(response.data)\n            setMyEvents(response.data)\n        } catch (error) {\n\n        }\n\n    }\n\n    const isApproved = (approved) => approved === true ? \"Approved\" : \"Rejected\"\n\n    const acceptEventHandler = async (eventId) => {\n        try {\n            await api.post(`/registration/${eventId}/approvals`, {}, { headers: { user } })\n            getMyEvents()\n\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    const rejectEventHandler = async (eventId) => {\n        try {\n            await api.post(`/registration/${eventId}/rejections`, {}, { headers: { user } })\n            getMyEvents()\n\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <ul className=\"events\">\n            {myEvents.map(event => (\n                <li key={event._id}>\n                    <div><strong>{event.eventTitle}</strong></div>\n                    <div className=\"events-details\">\n                        <span>Event Date: {moment(event.eventDate).format('l')}</span>\n                        <span>Event Price: ${parseFloat(event.eventPrice).toFixed(2)}</span>\n                        <span>User Email: {event.userEmail}</span>\n                        <span>Status:\n                            <span className={event.approved !== undefined ? isApproved(event.approved) : \"Pending\"}>{event.approved !== undefined ? isApproved(event.approved) : \"Pending\"}</span>\n                        </span>\n                    </div>\n                    <ButtonGroup>\n                        <Button disabled={event.approved === true || event.approved === false ? true : false} color=\"secondary\" onClick={() => acceptEventHandler(event._id)}>Accept</Button>\n                        <Button disabled={event.approved === true || event.approved === false ? true : false} color=\"danger\" onClick={() => rejectEventHandler(event._id)}>Reject</Button>\n                    </ButtonGroup>\n                </li>\n            ))}\n        </ul>\n    )\n}","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/user-context.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":27,"column":8,"nodeType":"65","endLine":27,"endColumn":10,"suggestions":"66"},{"ruleId":"59","replacedBy":"67"},{"ruleId":"61","replacedBy":"68"},{"ruleId":"63","severity":1,"message":"69","line":22,"column":8,"nodeType":"65","endLine":22,"endColumn":10,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":80,"column":29,"nodeType":"73","endLine":80,"endColumn":106},{"ruleId":"63","severity":1,"message":"74","line":14,"column":8,"nodeType":"65","endLine":14,"endColumn":10,"suggestions":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEvents'. Either include it or remove the dependency array.","ArrayExpression",["78"],["76"],["77"],"React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.",["79"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getMyEvents'. Either include it or remove the dependency array.",["80"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [getEvents]",{"range":"87","text":"88"},"Update the dependencies array to be: [history, user]",{"range":"89","text":"90"},"Update the dependencies array to be: [getMyEvents]",{"range":"91","text":"92"},[1083,1085],"[getEvents]",[921,923],"[history, user]",[381,383],"[getMyEvents]"]